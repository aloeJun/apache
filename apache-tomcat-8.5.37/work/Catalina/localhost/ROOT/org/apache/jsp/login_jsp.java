/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2023-06-25 05:03:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import common.util.StringHelper;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("common.util.StringHelper");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=GBK");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("    ");

		response.setHeader("Pragma","No-cache"); 
		response.setHeader("Cache-Control","no-cache");
		response.setHeader("Expires","0");
		
		String status = StringHelper.convertStringNull((String)request.getAttribute("status"));
		String content = StringHelper.convertStringNull((String)request.getAttribute("content"));
		String type = StringHelper.convertStringNull((String)request.getAttribute("type"));
	
      out.write("\r\n");
      out.write("       <meta http-equiv=\"Content-Type\" content=\"text/html; charset=GBK\">\r\n");
      out.write("        <title></title>\r\n");
      out.write("        <style>\r\n");
      out.write("        body{\r\n");
      out.write("        \tbackground: url('");
      out.print(request.getContextPath() );
      out.write("/common/images/5.jpeg');\r\n");
      out.write("        }\r\n");
      out.write("       \t#login-box{\r\n");
      out.write("       \t\twidth: 30%;\r\n");
      out.write("\t\t    height: auto;\r\n");
      out.write("\t\t    margin: 0 auto;\r\n");
      out.write("\t\t    margin-top: 10%;\r\n");
      out.write("\t\t    text-align: center;\r\n");
      out.write("\t\t    background: steelblue;\r\n");
      out.write("\t\t    padding: 20px 50px;\r\n");
      out.write("       \t}\r\n");
      out.write("       \t#login-box h1{\r\n");
      out.write("\t\t    color: #fff;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t.form{\r\n");
      out.write("       \t\tline-height: 25px;\r\n");
      out.write("       \t}\r\n");
      out.write("       \t.input{\r\n");
      out.write("       \t\tfloat: left;\r\n");
      out.write("       \t\twidth: 40%;\r\n");
      out.write("       \t\tmargin-left:30%;\r\n");
      out.write("            padding: 10px 0;\r\n");
      out.write("            align:center;\r\n");
      out.write("       \t}\r\n");
      out.write("       \t.btn{\r\n");
      out.write("          \twidth: 20%;\r\n");
      out.write("\t\t    font-size: 16px;\r\n");
      out.write("\t\t    letter-spacing: 3px;\r\n");
      out.write("       \t}\r\n");
      out.write("       \t.msg{\r\n");
      out.write("       \t\tcolor:#d1f317fc;\r\n");
      out.write("       \t}\r\n");
      out.write("        </style>\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      out.write("   \t\t<form name=\"form1\" action=\"\" method=\"post\">\r\n");
      out.write("    \t\t <div id=\"login-box\">\r\n");
      out.write("\t\t\t      <h1>欢迎来到宿舍管理系统</h1>\r\n");
      out.write("\t\t\t      <div class=\"form\">\r\n");
      out.write("\t\t\t          <div class=\"item\">\r\n");
      out.write("\t\t\t              <input type=\"text\" name='no' id=\"no\" placeholder=\"账号\" oninput=\"changeMsg()\">\r\n");
      out.write("\t\t\t          </div>\r\n");
      out.write("\t\t\t          <div class=\"item\">\r\n");
      out.write("\t\t\t              <input type=\"password\" name='pwd' id=\"pwd\" placeholder=\"密码\" oninput=\"changeMsg()\">\r\n");
      out.write("\t\t\t          </div>\r\n");
      out.write("\t\t\t      </div>\r\n");
      out.write("\t\t\t      <p id='msg' class='msg'>请登录</p>\r\n");
      out.write("\t\t\t      <button class='btn' onclick=\"login()\" id='loginButton' disabled>登录</button>\r\n");
      out.write("\t\t\t  </div>\r\n");
      out.write("   \t\t</form>\r\n");
      out.write("    </body>\r\n");
      out.write(" \t<script>\r\n");
      out.write(" \t\t//针对session超时的跳转，如果不是最高窗口，则跳转到最高窗口\r\n");
      out.write(" \t\tfunction checkTop(){\r\n");
      out.write(" \t\t\tif (window != top) \r\n");
      out.write("\t\t\t\ttop.location.href = location.href; \r\n");
      out.write(" \t\t}\r\n");
      out.write(" \t   checkTop();\r\n");
      out.write("\t\t\r\n");
      out.write("        function login(){\r\n");
      out.write("        \tform1.action=\"");
      out.print(request.getContextPath() );
      out.write("/entry.do?action=login&method=login\";\r\n");
      out.write("\t  \t\tform1.submit();\r\n");
      out.write("        } \r\n");
      out.write("        \r\n");
      out.write("        var noInput = document.getElementById(\"no\");\r\n");
      out.write("        var pwdInput = document.getElementById(\"pwd\");\r\n");
      out.write("        var msg = document.getElementById(\"msg\");\r\n");
      out.write("        var loginButton = document.getElementById(\"loginButton\");\r\n");
      out.write("        function changeMsg(){\r\n");
      out.write("        \tvar no=noInput.value,pwd=pwdInput.value;\r\n");
      out.write("        \tloginButton.disabled=true;\r\n");
      out.write("       \t\tif(no=='' && pwd ==''){\r\n");
      out.write("       \t\t\tmsg.innerText=\"请输入账号和密码\";\r\n");
      out.write("       \t\t}else if(no==''){\r\n");
      out.write("       \t\t\tmsg.innerText=\"请输入账号\";\r\n");
      out.write("       \t\t}else if(pwd==''){\r\n");
      out.write("       \t\t\tmsg.innerText=\"请输入密码\";\r\n");
      out.write("       \t\t}else{\r\n");
      out.write("       \t\t\tmsg.innerText=\"\";\r\n");
      out.write("       \t\t\tloginButton.disabled=false;\r\n");
      out.write("       \t\t}\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        function init(){\r\n");
      out.write("        \tvar status = '");
      out.print(status );
      out.write("';\r\n");
      out.write("        \tvar content = '");
      out.print(content );
      out.write("';\r\n");
      out.write("        \tif(status=='-1' && content!=''){\r\n");
      out.write("        \t\tmsg.innerText=content;\r\n");
      out.write("        \t}\r\n");
      out.write("        }\r\n");
      out.write("       init();\r\n");
      out.write(" \t</script>\t\r\n");
      out.write("\t\t\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
